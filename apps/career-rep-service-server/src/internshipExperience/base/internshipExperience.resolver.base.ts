/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternshipExperience } from "./InternshipExperience";
import { InternshipExperienceCountArgs } from "./InternshipExperienceCountArgs";
import { InternshipExperienceFindManyArgs } from "./InternshipExperienceFindManyArgs";
import { InternshipExperienceFindUniqueArgs } from "./InternshipExperienceFindUniqueArgs";
import { CreateInternshipExperienceArgs } from "./CreateInternshipExperienceArgs";
import { UpdateInternshipExperienceArgs } from "./UpdateInternshipExperienceArgs";
import { DeleteInternshipExperienceArgs } from "./DeleteInternshipExperienceArgs";
import { InternshipExperienceService } from "../internshipExperience.service";
@graphql.Resolver(() => InternshipExperience)
export class InternshipExperienceResolverBase {
  constructor(protected readonly service: InternshipExperienceService) {}

  async _internshipExperiencesMeta(
    @graphql.Args() args: InternshipExperienceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternshipExperience])
  async internshipExperiences(
    @graphql.Args() args: InternshipExperienceFindManyArgs
  ): Promise<InternshipExperience[]> {
    return this.service.internshipExperiences(args);
  }

  @graphql.Query(() => InternshipExperience, { nullable: true })
  async internshipExperience(
    @graphql.Args() args: InternshipExperienceFindUniqueArgs
  ): Promise<InternshipExperience | null> {
    const result = await this.service.internshipExperience(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternshipExperience)
  async createInternshipExperience(
    @graphql.Args() args: CreateInternshipExperienceArgs
  ): Promise<InternshipExperience> {
    return await this.service.createInternshipExperience({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InternshipExperience)
  async updateInternshipExperience(
    @graphql.Args() args: UpdateInternshipExperienceArgs
  ): Promise<InternshipExperience | null> {
    try {
      return await this.service.updateInternshipExperience({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternshipExperience)
  async deleteInternshipExperience(
    @graphql.Args() args: DeleteInternshipExperienceArgs
  ): Promise<InternshipExperience | null> {
    try {
      return await this.service.deleteInternshipExperience(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
