/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternshipExperienceService } from "../internshipExperience.service";
import { InternshipExperienceCreateInput } from "./InternshipExperienceCreateInput";
import { InternshipExperience } from "./InternshipExperience";
import { InternshipExperienceFindManyArgs } from "./InternshipExperienceFindManyArgs";
import { InternshipExperienceWhereUniqueInput } from "./InternshipExperienceWhereUniqueInput";
import { InternshipExperienceUpdateInput } from "./InternshipExperienceUpdateInput";

export class InternshipExperienceControllerBase {
  constructor(protected readonly service: InternshipExperienceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternshipExperience })
  async createInternshipExperience(
    @common.Body() data: InternshipExperienceCreateInput
  ): Promise<InternshipExperience> {
    return await this.service.createInternshipExperience({
      data: data,
      select: {
        company: true,
        createdAt: true,
        endDate: true,
        id: true,
        role: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternshipExperience] })
  @ApiNestedQuery(InternshipExperienceFindManyArgs)
  async internshipExperiences(
    @common.Req() request: Request
  ): Promise<InternshipExperience[]> {
    const args = plainToClass(InternshipExperienceFindManyArgs, request.query);
    return this.service.internshipExperiences({
      ...args,
      select: {
        company: true,
        createdAt: true,
        endDate: true,
        id: true,
        role: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternshipExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internshipExperience(
    @common.Param() params: InternshipExperienceWhereUniqueInput
  ): Promise<InternshipExperience | null> {
    const result = await this.service.internshipExperience({
      where: params,
      select: {
        company: true,
        createdAt: true,
        endDate: true,
        id: true,
        role: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternshipExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternshipExperience(
    @common.Param() params: InternshipExperienceWhereUniqueInput,
    @common.Body() data: InternshipExperienceUpdateInput
  ): Promise<InternshipExperience | null> {
    try {
      return await this.service.updateInternshipExperience({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          endDate: true,
          id: true,
          role: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternshipExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternshipExperience(
    @common.Param() params: InternshipExperienceWhereUniqueInput
  ): Promise<InternshipExperience | null> {
    try {
      return await this.service.deleteInternshipExperience({
        where: params,
        select: {
          company: true,
          createdAt: true,
          endDate: true,
          id: true,
          role: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
