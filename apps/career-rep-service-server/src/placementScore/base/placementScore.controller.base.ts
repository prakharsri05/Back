/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlacementScoreService } from "../placementScore.service";
import { PlacementScoreCreateInput } from "./PlacementScoreCreateInput";
import { PlacementScore } from "./PlacementScore";
import { PlacementScoreFindManyArgs } from "./PlacementScoreFindManyArgs";
import { PlacementScoreWhereUniqueInput } from "./PlacementScoreWhereUniqueInput";
import { PlacementScoreUpdateInput } from "./PlacementScoreUpdateInput";

export class PlacementScoreControllerBase {
  constructor(protected readonly service: PlacementScoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlacementScore })
  async createPlacementScore(
    @common.Body() data: PlacementScoreCreateInput
  ): Promise<PlacementScore> {
    return await this.service.createPlacementScore({
      data: data,
      select: {
        createdAt: true,
        dateCalculated: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlacementScore] })
  @ApiNestedQuery(PlacementScoreFindManyArgs)
  async placementScores(
    @common.Req() request: Request
  ): Promise<PlacementScore[]> {
    const args = plainToClass(PlacementScoreFindManyArgs, request.query);
    return this.service.placementScores({
      ...args,
      select: {
        createdAt: true,
        dateCalculated: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlacementScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async placementScore(
    @common.Param() params: PlacementScoreWhereUniqueInput
  ): Promise<PlacementScore | null> {
    const result = await this.service.placementScore({
      where: params,
      select: {
        createdAt: true,
        dateCalculated: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlacementScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlacementScore(
    @common.Param() params: PlacementScoreWhereUniqueInput,
    @common.Body() data: PlacementScoreUpdateInput
  ): Promise<PlacementScore | null> {
    try {
      return await this.service.updatePlacementScore({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateCalculated: true,
          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlacementScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlacementScore(
    @common.Param() params: PlacementScoreWhereUniqueInput
  ): Promise<PlacementScore | null> {
    try {
      return await this.service.deletePlacementScore({
        where: params,
        select: {
          createdAt: true,
          dateCalculated: true,
          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
