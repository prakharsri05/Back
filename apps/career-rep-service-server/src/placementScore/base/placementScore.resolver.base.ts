/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlacementScore } from "./PlacementScore";
import { PlacementScoreCountArgs } from "./PlacementScoreCountArgs";
import { PlacementScoreFindManyArgs } from "./PlacementScoreFindManyArgs";
import { PlacementScoreFindUniqueArgs } from "./PlacementScoreFindUniqueArgs";
import { CreatePlacementScoreArgs } from "./CreatePlacementScoreArgs";
import { UpdatePlacementScoreArgs } from "./UpdatePlacementScoreArgs";
import { DeletePlacementScoreArgs } from "./DeletePlacementScoreArgs";
import { PlacementScoreService } from "../placementScore.service";
@graphql.Resolver(() => PlacementScore)
export class PlacementScoreResolverBase {
  constructor(protected readonly service: PlacementScoreService) {}

  async _placementScoresMeta(
    @graphql.Args() args: PlacementScoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlacementScore])
  async placementScores(
    @graphql.Args() args: PlacementScoreFindManyArgs
  ): Promise<PlacementScore[]> {
    return this.service.placementScores(args);
  }

  @graphql.Query(() => PlacementScore, { nullable: true })
  async placementScore(
    @graphql.Args() args: PlacementScoreFindUniqueArgs
  ): Promise<PlacementScore | null> {
    const result = await this.service.placementScore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlacementScore)
  async createPlacementScore(
    @graphql.Args() args: CreatePlacementScoreArgs
  ): Promise<PlacementScore> {
    return await this.service.createPlacementScore({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PlacementScore)
  async updatePlacementScore(
    @graphql.Args() args: UpdatePlacementScoreArgs
  ): Promise<PlacementScore | null> {
    try {
      return await this.service.updatePlacementScore({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlacementScore)
  async deletePlacementScore(
    @graphql.Args() args: DeletePlacementScoreArgs
  ): Promise<PlacementScore | null> {
    try {
      return await this.service.deletePlacementScore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
