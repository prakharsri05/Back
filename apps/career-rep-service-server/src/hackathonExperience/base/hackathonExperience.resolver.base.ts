/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HackathonExperience } from "./HackathonExperience";
import { HackathonExperienceCountArgs } from "./HackathonExperienceCountArgs";
import { HackathonExperienceFindManyArgs } from "./HackathonExperienceFindManyArgs";
import { HackathonExperienceFindUniqueArgs } from "./HackathonExperienceFindUniqueArgs";
import { CreateHackathonExperienceArgs } from "./CreateHackathonExperienceArgs";
import { UpdateHackathonExperienceArgs } from "./UpdateHackathonExperienceArgs";
import { DeleteHackathonExperienceArgs } from "./DeleteHackathonExperienceArgs";
import { HackathonExperienceService } from "../hackathonExperience.service";
@graphql.Resolver(() => HackathonExperience)
export class HackathonExperienceResolverBase {
  constructor(protected readonly service: HackathonExperienceService) {}

  async _hackathonExperiencesMeta(
    @graphql.Args() args: HackathonExperienceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HackathonExperience])
  async hackathonExperiences(
    @graphql.Args() args: HackathonExperienceFindManyArgs
  ): Promise<HackathonExperience[]> {
    return this.service.hackathonExperiences(args);
  }

  @graphql.Query(() => HackathonExperience, { nullable: true })
  async hackathonExperience(
    @graphql.Args() args: HackathonExperienceFindUniqueArgs
  ): Promise<HackathonExperience | null> {
    const result = await this.service.hackathonExperience(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HackathonExperience)
  async createHackathonExperience(
    @graphql.Args() args: CreateHackathonExperienceArgs
  ): Promise<HackathonExperience> {
    return await this.service.createHackathonExperience({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HackathonExperience)
  async updateHackathonExperience(
    @graphql.Args() args: UpdateHackathonExperienceArgs
  ): Promise<HackathonExperience | null> {
    try {
      return await this.service.updateHackathonExperience({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HackathonExperience)
  async deleteHackathonExperience(
    @graphql.Args() args: DeleteHackathonExperienceArgs
  ): Promise<HackathonExperience | null> {
    try {
      return await this.service.deleteHackathonExperience(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
